<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/profile/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/profile/" rel="alternate" type="text/html" /><updated>2018-06-13T07:17:45+09:00</updated><id>http://localhost:4000/profile/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/profile/blog/jekyll/update/2018/05/05/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-05-05T13:03:45+09:00</published><updated>2018-05-05T13:03:45+09:00</updated><id>http://localhost:4000/profile/blog/jekyll/update/2018/05/05/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/profile/blog/jekyll/update/2018/05/05/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">「オブジェクト指向のこころ」を read 読んだ</title><link href="http://localhost:4000/profile/blog/2018/03/03/design-patterns-explained.html" rel="alternate" type="text/html" title="「オブジェクト指向のこころ」を read 読んだ" /><published>2018-03-03T00:00:00+09:00</published><updated>2018-03-03T00:00:00+09:00</updated><id>http://localhost:4000/profile/blog/2018/03/03/design-patterns-explained</id><content type="html" xml:base="http://localhost:4000/profile/blog/2018/03/03/design-patterns-explained.html">&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;

&lt;p&gt;よくありそうなデザインパターンの解説本だが、今まで読んだプログラミングに関する本の中でもトップクラスに良い本だった。デザインパターンの思想が理解しやすかったのはもちろん、一般的にオブジェクト指向に基づいて柔軟なコードを書くための原則がわかった気がする。この本が良かった理由は以下の２つ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例 -&amp;gt; パターンの順で説明されている&lt;/li&gt;
  &lt;li&gt;全てのパターンを貫く設計思想が明確に何度も述べられている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a&lt;/p&gt;

&lt;p&gt;本を理解するには、文章を真剣に読まなければならず、文章を真剣に読むためには、自分は本の内容を理解しなければならないという気持ちが必要である。過去
眺めたデザインパターンの本では、パターンの内容が説明されてか
ら付け足し程度に使用例が述べられていたので、パターンを理解するメリットがわからず、
途中でどうでもよくなってしまっていた。
この本では、デザインパターンを適用しないと設計が破綻してしまうようなそれなりに複雑な
問題の例が最初に述べられる。そのため、この意味不明な問題がパターンでどうやって解決されるのだろうという興味に引っ張られて、勢いを失わずに読み進めることができた。&lt;/p&gt;</content><author><name></name></author><summary type="html">概要</summary></entry></feed>